# https://taskfile.dev
version: '3'

tasks:

  patch:
    desc: "Bump the project patch version"
    cmds:
      - task: bump
        vars:
          part: patch
  minor:
    desc: "Bump the project minor version"
    cmds:
      - task: bump
        vars:
          part: minor
  major:
    desc: "Bump the project major version"
    cmds:
      - task: bump
        vars:
          part: major

  check-yq:
    desc: "Check if yq is installed"
    internal: true
    cmds:
      - command -v yq >/dev/null 2>&1 || { echo >&2 "yq is required but not installed. Aborting."; exit 1; }
    silent: true

  bump:
    desc: "Bump the project version"
    internal: true
    silent: true
    deps:
      - check-yq
    vars:
      part: '{{.part}}'
    cmds:
      - |
        #!/bin/sh
        set -e

        # Check if current directory is a git repo and if the repo is clean
          if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
          echo "Error: Current directory is not inside a Git repository."
          exit 1
        fi
  
        if ! git diff-index --quiet HEAD --; then
          echo "Error: Git repository is not clean. Commit or stash changes before bumping the version."
          exit 1
        fi        
        
        FILE="ump.yaml"
        CURRENT_VERSION=$(yq e '.service.version' $FILE)
        
        # Split the version into parts
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        case "{{.part}}" in
          major)
            NEW_VERSION=$((major+1)).0.0
            ;;
          minor)
            NEW_VERSION=$major.$((minor+1)).0
            ;;
          patch)
            NEW_VERSION=$major.$minor.$((patch+1))
            ;;
          *)
            echo "Invalid version part: {{.part}}, must be one of: major, minor, patch"
            exit 1
            ;;
        esac
        
        echo "Bumping version to: $NEW_VERSION"
        yq e -i ".service.version = \"$NEW_VERSION\"" $FILE

        # Commit the change
        git add $FILE
        git commit -m "chore: bump version to $NEW_VERSION"
  
        # Create a tag for the new version
        git tag -a "v$NEW_VERSION" -m "Version v$NEW_VERSION"
  
        echo "Version bumped to v$NEW_VERSION, committed, and tagged."
      
