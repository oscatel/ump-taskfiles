# https://taskfile.dev
version: '3'

tasks:

  check-yq:
    desc: "Check if yq is installed"
    internal: true
    cmds:
      - command -v yq >/dev/null 2>&1 || { echo >&2 "yq is required but not installed. Aborting."; exit 1; }
    silent: true

  sync:
    desc: "Sync dependencies with versions listed in go.mod"
    cmds:
      - task: sync-buf-deps
      - task: sync-ump-deps

  sync-buf:
    desc: "Sync buf deps with versions listed in go.mod"
    deps:
      - check-yq
    silent: true
    cmds:
      - |
        echo "Syncing proto/buf.yaml deps with versions listed in go.mod"
        green_tick="\033[32m✓\033[0m"
        orange_arrow="\033[38;5;208m↑\033[0m"
        red_x="\033[31m✖\033[0m"
        buf_yaml="proto/buf.yaml"
        go_mod="go.mod"
        
        # Read dependencies from ump.yaml
        deps=$(yq e '.deps | .[]' $buf_yaml)

        i=-1
        for dep in $deps; do
          ((i++))
          if [[ ! $dep == buf.build/oscatel/ump-* ]]; then
            continue
          fi;
        
          if [[ "$dep" == *:* ]]; then
            package="${dep%:*}"
            version="${dep##*:}"
            version="${version#v}"
          else
            package="$dep"
            version=""
          fi
        
          gh_dep=$(echo $package | sed 's|buf.build|github.com|')        
          go_mod_version=$(grep "$gh_dep" $go_mod | awk '{print $2}' | sed 's/^v//')
        
          if [ -z "$go_mod_version" ]; then
            echo -e " $red_x $package not found in $go_mod."
            continue
          fi

          if [ "$go_mod_version" != "$version" ]; then
            echo -e " $orange_arrow $package $version -> $go_mod_version"
            yq e -i ".deps[$i] = \"$package:v$go_mod_version\"" $buf_yaml
          else 
            echo -e " $green_tick $package $version"
          fi
        
        done

  sync-ump:
    desc: "Sync ump.yaml dependencies with versions listed in go.mod"
    deps:
      - check-yq
    silent: true
    cmds:
      - |
        echo "Syncing ump.yaml deps with versions listed in go.mod"
        green_tick="\033[32m✓\033[0m"
        orange_arrow="\033[38;5;208m↑\033[0m"
        red_x="\033[31m✖\033[0m"
        ump_yaml="ump.yaml"
        go_mod="go.mod"

        # Read dependencies from ump.yaml
        deps=$(yq e '.dependencies | keys | .[]' $ump_yaml)
        
        # Iterate over each dependency to find and update versions
        for dep in $deps; do
          # Format the GitHub URL part to match go.mod
          github_path="github.com/oscatel/$dep"
        
          version_found=$(grep "$github_path" $go_mod | awk '{print $2}' | sed 's/^v//')
          # Read the current version from ump.yaml
          current_version=$(yq e ".dependencies.$dep" $ump_yaml | sed 's/^v//')
        
          if [ ! -z "$version_found" ]; then
            if [ "$version_found" != "$current_version" ]; then
              yq e -i ".dependencies.$dep = \"$version_found\"" $ump_yaml
              echo -e " $orange_arrow $dep $current_version -> $version_found"
            else
              echo -e " $green_tick $dep $current_version"
            fi
          else
            echo -e " $red_x $dep not found in $go_mod."
          fi
        done
        echo "Done"


