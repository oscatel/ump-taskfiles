# https://taskfile.dev
version: '3'

tasks:

  bump-patch:
    desc: "Bump the project patch version"
    cmds:
      - task: bump
        vars:
          part: patch
  bump-minor:
    desc: "Bump the project minor version"
    cmds:
      - task: bump
        vars:
          part: minor
  bump-major:
    desc: "Bump the project major version"
    cmds:
      - task: bump
        vars:
          part: major

  check-yq:
    desc: "Check if yq is installed"
    internal: true
    cmds:
      - command -v yq >/dev/null 2>&1 || { echo >&2 "yq is required but not installed. Aborting."; exit 1; }
    silent: true

  bump:
    desc: "Bump the project version"
    internal: true
    silent: true
    deps:
      - check-yq
    vars:
      part: '{{.part}}'
    cmds:
      - |
        #!/bin/sh
        set -e
        FILE="ump.yaml"
        CURRENT_VERSION=$(yq e '.service.version' $FILE)
        
        # Split the version into parts
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        
        case "{{.part}}" in
          major)
            NEW_VERSION=$((major+1)).0.0
            ;;
          minor)
            NEW_VERSION=$major.$((minor+1)).0
            ;;
          patch)
            NEW_VERSION=$major.$minor.$((patch+1))
            ;;
          *)
            echo "Invalid version part: {{.part}}, must be one of: major, minor, patch"
            exit 1
            ;;
        esac
        
        echo "Bumping version to: $NEW_VERSION"
        yq e -i ".service.version = \"$NEW_VERSION\"" $FILE

  sync-deps:
    desc: "Sync ump.yaml dependencies with versions listed in go.mod"
    cmds:
      - |
        echo "Syncing ump.yaml deps with versions listed in go.mod"
        green_tick="\033[32m✓\033[0m"
        orange_arrow="\033[38;5;208m↑\033[0m"
        red_x="\033[31m✖\033[0m"
        ump_yaml="ump.yaml"
        go_mod="go.mod"

        # Ensure yq is installed
        if ! command -v yq &> /dev/null; then
            echo "yq could not be found. Please install yq."
            exit 1
        fi

        # Read dependencies from ump.yaml
        deps=$(yq e '.dependencies | keys | .[]' $ump_yaml)
        
        # Iterate over each dependency to find and update versions
        for dep in $deps; do
          # Format the GitHub URL part to match go.mod
          github_path="github.com/oscatel/$dep"
        
          version_found=$(grep "$github_path" $go_mod | awk '{print $2}' | sed 's/^v//')
          # Read the current version from ump.yaml
          current_version=$(yq e ".dependencies.$dep" $ump_yaml | sed 's/^v//')
        
          if [ ! -z "$version_found" ]; then
            if [ "$version_found" != "$current_version" ]; then
              yq e -i ".dependencies.$dep = \"$version_found\"" $ump_yaml
              echo -e " $orange_arrow $dep $current_version -> $version_found"
            else
              echo -e " $green_tick $dep $current_version"
            fi
          else
            echo -e " $red_x $dep not found in $go_mod."
          fi
        done
        echo "Done"
    silent: true


